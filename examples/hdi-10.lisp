(defpackage exapunks.hdi-10
  (:use :cl :exapunks))
(in-package :exapunks.hdi-10)

(defun heart-80 ()
  (to-cliboard-with-max-lines (100)
    (let ((offset 2)
          (last-label-count 7))
      (labels ((make-label (side n)
                 (str:join "_" (list side (format nil "~A" n))))
               (make-pre-loop (side)
                 (labels ((f (n)
                            (test :x := (+ offset n))
                            (tjmp (make-label side n))))
                   (repl (make-label side "high"))
                   (repl (make-label side "low"))
                   (f 1) ;; > t2
                   (f 5)  ;; t3
                   (halt)

                   (mark (make-label side "high"))
                   (f 3)  ;; t1
                   (f 6)
                   (f 0)  ;; t3
                   (halt)

                   (mark (make-label side "low"))
                   (f 2)
                   (f 4)
                   (f 7) ;;
                   (halt)))
               (make-post-loop (label side)
                 (loop for i from last-label-count downto 1
                    do
                      (mark (make-label side i))
                      (copy -70 :nerv))
                 (mark (make-label side 0))
                 (jump label)))
        (link 800)
        (repl "left")
        (repl "right")
        (mark "cns")
        (copy :nerv :x)
        (copy :x :m)
        (copy :x :m)
        (jump "cns")

        (mark "left")
        (link 1)
        (link 1)

        (mark "left_loop")
        (copy 40 :nerv)
        (divi :m -10 :x)
        (copy -70 :nerv)
        (make-pre-loop "left")
        (make-post-loop "left_loop" "left")

        (mark "right")
        (link 3)
        (link 3)
        (mark "right_loop")
        (copy -70 :nerv)
        (copy 40 :nerv)
        (divi :m -10 :x)
        (make-pre-loop "right")
        (make-post-loop "right_loop" "right")))))

(defun heart-107 ()
  (to-cliboard-with-max-lines (100)
    (let ((pre-loop 3))
      (link 800)
      (repl "left")
      (repl "right")
      (mark "cns")
      (copy :nerv :x)
      (copy :x :m)
      (copy :x :m)
      (jump "cns")

      (mark "left")
      (link 1)
      (link 1)
      (mark "left_loop")
      (addi :m 20 :x)
      (copy 40 :nerv)
      (copy -70 :nerv)

      (while (test :x :< (1+ (* pre-loop -10)))
        (dotimes (i pre-loop)
          (copy -70 :nerv))
        (addi :x (* 10 pre-loop) :x))

      (while (test :x :< -9)
        (addi :x 10 :x)
        (copy -70 :nerv))
      (jump "left_loop")

      (mark "right")
      (link 3)
      (link 3)
      (mark "right_loop")
      (addi :m 20 :x)
      (copy -70 :nerv)
      (copy 40 :nerv)

      (while (test :x :< (1+ (* pre-loop -10)))
        (dotimes (i pre-loop)
          (copy -70 :nerv))
        (addi :x (* 10 pre-loop) :x))

      (while (test :x :< -9)
        (addi :x 10 :x)
        (copy -70 :nerv))
      (jump "right_loop"))))
